# This is a GitHub workflow defining a set of jobs with a set of steps.
# ref: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
#
# This workflow use aquasecurity/trivy to scan the images we have published for
# known vulnerabilities. If there are such that can be patched, we let this
# workflow fail to signal that unless we make an exception, which we do for the
# singleuser-sample image only.
#
name: Vuln. scan

on:
  schedule:
    # At 00:00 - https://crontab.guru
    - cron: "0 0 * * *"
  workflow_dispatch:
  # FIXME: push added for development of the pr
  push:
    branch: master

defaults:
  run:
    shell: bash

jobs:
  trivy_image_scan:
    # if: github.repository == 'consideratio/zero-to-jupyterhub-k8s'
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - image_ref: hub
            image_dir: images/hub
            accept_failure: false
          - image_ref: secret-sync
            image_dir: images/secret-sync
            accept_failure: false
          - image_ref: network-tools
            image_dir: images/network-tools
            accept_failure: false
          - image_ref: image-awaiter
            image_dir: images/image-awaiter
            accept_failure: false
          - image_ref: singleuser-sample
            image_dir: images/singleuser-sample
            accept_failure: true

    steps:
      - uses: actions/checkout@v2
        with:
          # chartpress requires the full history
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install chartpress
        run: |
          pip install chartpress

      - name: Create ./tmp dir
        run: |
          mkdir ./tmp

      # charpress --list-images output lines of name:tag format. We use it with
      # a search string in matrix.image_ref to find the specific image to scan
      # in this job.
      - name: Identify image name:tag
        id: image
        run: |
          IMAGE=$(
              chartpress --list-images \
            | grep ${{ matrix.image_ref }}:
          )
          echo "::set-output name=image::$IMAGE"
          echo "Image identified: $IMAGE"

      # Action reference: https://github.com/aquasecurity/trivy-action
      - name: Scan published image
        id: scan_published_image
        uses: aquasecurity/trivy-action@master
        with:
          # image-ref: ${{ steps.image.outputs.image }}
          # FIXME: I hardcoded this to be 0.10.6 as I modified the Dockerfile's
          #        in this PR which shouldn't happen in practice.
          image-ref: jupyterhub/k8s-${{ matrix.image_ref }}:0.10.6
          format: json  # ref: https://github.com/aquasecurity/trivy#save-the-results-as-json
          output: tmp/scan_published_image.json
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
        # Keep running the subsequent steps of the job, they are made to
        # explicitly adjust based on this step's outcome.
        continue-on-error: true

      # Steps below is only executing if vulnerabilities have been detected.
      # -----------------------------------------------------------------------

      - name: Rebuild image
        id: rebuild
        if: steps.scan_published_image.outcome == 'failure'
        run: |
          docker build -t rebuilt-image images/${{ matrix.image_ref }}

      - name: Scan rebuilt image
        id: scan_rebuilt_image
        if: steps.rebuild.outcome == 'success'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: rebuilt-image
          format: json  # ref: https://github.com/aquasecurity/trivy#save-the-results-as-json
          output: tmp/scan_rebuilt_image.json
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # Create a PR only if we have reduced the known vulnerabilities between
      # scan_published_image and scan_rebuilt_image. Update a PR only if we have reduced the
      # known vulnerabilities between scan_published_image and scan_rebuilt_image in a new way
      # than before.
      #
      - name: Compare scan reports
        id: compare
        if: steps.rebuild.outcome == 'success'
        run: |
          json_report_to_md() {
              echo "Target | Vuln. ID | Package Name | Installed v. | Fixed v." > $2
              echo "-|-|-|-|-" >> $2
              cat "$1" | jq -r '.[] | select(.Vulnerabilities != null) | .Type + " | " + (.Vulnerabilities[] | .VulnerabilityID + " | " + .PkgName + " | " + .InstalledVersion + " | " + .FixedVersion)' | sort >> $2
          }

          json_report_to_md tmp/scan_published_image.json tmp/1.md
          json_report_to_md tmp/scan_rebuilt_image.json tmp/2.md

          HASH1=$(cat tmp/1.md | sha1sum)
          HASH2=$(cat tmp/2.md | sha1sum)

          # Did rebuilding the image change anything?
          if [ "$HASH1" == "$HASH2" ]; then
              echo "::set-output name=proceed::no"
              echo "No vulnerabilities got patched by rebuilding the image :("
              echo ""
              cat tmp/1.md
              exit 1
          else
              echo "::set-output name=proceed::yes"
              echo "::set-output name=hash::$HASH2"
              echo "Vulnerabilities were patched by rebuilding the image!"
              echo ""
              git --no-pager diff --no-index --color=always tmp/1.md tmp/2.md | tail -n 6

              echo "```diff" > tmp/diff.md
              git --no-pager diff --no-index --color=no     tmp/1.md tmp/2.md | tail -n 6 >> tmp/diff.md
              echo "```" >> tmp/diff.md
          fi

      # Steps below are executed if the compare step decided to proceed.
      # -----------------------------------------------------------------------

      # ref: https://github.com/jacobtomlinson/gha-find-replace
      - name: Update VULN_SCAN_HASH in Dockerfile
        if: steps.compare.outputs.proceed == 'yes'
        uses: jacobtomlinson/gha-find-replace@0.1.2
        with:
          include: "${{ matrix.image_dir }}/Dockerfile"
          find: "#.*VULN_SCAN_HASH=.*"
          replace: "# VULN_SCAN_HASH=${{ steps.compare.outputs.hash }}"

      # The create-pull-request action is smart enough to only create/update a
      # PR if there is a change to anything not .gitignored. A change will be
      # made only if the compare steps outputted hash is changed.
      #
      # ref: https://github.com/peter-evans/create-pull-request
      - name: Create or update a PR
        if: steps.compare.outputs.proceed == 'yes'
        uses: peter-evans/create-pull-request@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          reviewers: "consideratio"
          branch: "vuln-scan-${{ matrix.image_ref }}"
          title: "Vulnerability patch in ${{ matrix.image_ref }}"
          body: |
            Triggers an image rebuild to patch known vulnerabilities in the ${{ matrix.image_ref }} image.

            TODO: show tmp/2.md
            TODO: show tmp/diff.md
          commit-message: |
            Patch known vulnerability in ${{ matrix.image_ref }}

      - name: echo stuff...
        if: steps.compare.outputs.proceed == 'yes'
        run: |
          cat tmp/2.md
          echo ---
          cat tmp/diff.md
