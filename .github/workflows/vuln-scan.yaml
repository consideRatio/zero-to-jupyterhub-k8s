# This is a GitHub workflow defining a set of jobs with a set of steps.
# ref: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
#
# This workflow use aquasecurity/trivy to scan the images we have published for
# known vulnerabilities. If there are such that can be patched, we let this
# workflow fail to signal that unless we make an exception, which we do for the
# singleuser-sample image only.
#
name: Vuln. scan

on:
  schedule:
    # At 00:00 - https://crontab.guru
    - cron: "0 0 * * *"
  workflow_dispatch:
  # FIXME: push added for development of the pr
  push:
    branch: master

defaults:
  run:
    shell: bash

jobs:
  trivy_image_scan:
    if: github.repository == 'consideratio/zero-to-jupyterhub-k8s'
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - image_ref: hub
            image_dir: images/hub
            accept_failure: false
          - image_ref: secret-sync
            image_dir: images/secret-sync
            accept_failure: false
          - image_ref: network-tools
            image_dir: images/network-tools
            accept_failure: false
          - image_ref: image-awaiter
            image_dir: images/image-awaiter
            accept_failure: false
          - image_ref: singleuser-sample
            image_dir: images/singleuser-sample
            accept_failure: true

    steps:
      - uses: actions/checkout@v2
        with:
          # chartpress requires the full history
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install chartpress
        run: |
          pip install chartpress

      # charpress --list-images output lines of name:tag format. We use it with
      # a search string in matrix.image_ref to find the specific image to scan
      # in this job.
      - name: Identify image name:tag
        id: image
        run: |
          IMAGE=$(
              chartpress --list-images \
            | grep ${{ matrix.image_ref }}:
          )
          echo "::set-output name=image::$IMAGE"
          echo "Image identified: $IMAGE"

      # Action reference: https://github.com/aquasecurity/trivy-action
      - name: Run Trivy vulnerability scanner
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        # Keep running the subsequent steps of the job, they are made to
        # explicitly adjust based on this step's outcome.
        continue-on-error: true

      # Rebuild image
      - name: Rebuild image
        id: rebuild
        if: steps.scan.outcome == 'failure'
        run: |
          docker build -t rebuilt-image images/${{ matrix.image_ref }}

      # Scan rebuilt image
      - name: Run Trivy vulnerability scanner again
        if: steps.rebuild.outcome == 'success'
        id: scan_again
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: rebuilt-image
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        # Keep running the subsequent steps of the job, they are made to
        # explicitly adjust based on this step's outcome.
        continue-on-error: true

      # Case 1: rebuilt image scan fail -> fail job unless accept_failure
      - name: "Rebuild -> Scan conclusion: failure"
        if: steps.scan_again.outcome == 'failure'
        run: |
          echo "A rebuild hasn't solved the problem, and a manual patch required at the moment."
          exit 1
        # Don't let the job fail if we accept_failure. Note that the subsequent
        # steps will not run unless steps.scan_again.outcome == 'success'.
        continue-on-error: ${{ matrix.accept_failure }}

      # Case 2: rebuilt image scan succeeds -> create and submit a PR and output a GitHub annotation -> fail job
      - name: "Rebuild -> scan conclusion: success"
        if: steps.scan_again.outcome == 'success'
        run: |
          echo "A rebuild patched all known vulnerabilities! Now we just have to trigger a rebuild!"

      - name: "Dummy update Dockerfile to trigger a rebuild"
        if: steps.scan_again.outcome == 'success'
        run: |
          echo "FIXME: make a small modification, commit, and create a PR"

      # ref: https://github.com/jacobtomlinson/gha-find-replace
      - name: Update REBUILD_DATETIME in Dockerfile
        if: steps.scan_again.outcome == 'success'
        uses: jacobtomlinson/gha-find-replace@0.1.2
        with:
          include: "${{ matrix.image_dir }}/Dockerfile"
          find: ".*REBUILD_DATETIME=.*"
          replace: "# REBUILD_DATETIME=hardcoded-stuff"

      # ref: https://github.com/peter-evans/create-pull-request
      - name: Create or update a PR
        if: steps.scan_again.outcome == 'success'
        uses: peter-evans/create-pull-request@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          reviewers: "consideratio"
          branch: "vuln-scan-${{ matrix.image_ref }}"
          title: "Patch known vulnerability in ${{ matrix.image_ref }}"
          body: |
            Known vulnerabilities has been detected in the ${{ matrix.image_ref }} image but have been patched by simply rebuilding the image.
          commit-message: |
            Patch known vulnerability in ${{ matrix.image_ref }}
