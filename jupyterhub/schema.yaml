title: Config
type: object
properties:
  hub:
    type: object
    properties:
      cookieSecret:
        type:
          - string
          - "null"
        description: |
          A 64-byte cryptographically secure randomly generated string used to sign values of
          secure cookies set by the hub. If unset, jupyterhub will generate one on startup and
          save it in the file `jupyterhub_cookie_secret` in the `/srv/jupyterhub` directory of
          the hub container. Value set here will override the value in `jupyterhub_cookie_secret`.

          You do not need to set this at all if you are using the default configuration for
          storing databases - sqlite on a persistent volume (with `hub.db.type` set to the
          default `sqlite-pvc`). If you are using an external database, then you must set this
          value explicitly - or your users will keep getting logged out each time the hub pod
          restarts.

          This must be generated with `openssl rand -hex 32`.

          Changing this value will all user logins to be invalidated. If this secret leaks,
          *immediately* change it to something else, or user data can be compromised
      imagePullPolicy:
        type: string
        enum:
          - IfNotPresent
          - Always
          - Never
        description: |
          Set the imagePullPolicy on the hub pod.

          See [the kubernetes docs](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
          for more info on what the values mean.
      image:
        type: object
        description: |
          Set custom image name / tag for the hub pod.

          Use this to customize which hub image is used. Note that you must use a version of
          the hub image that was bundled with this particular version of the helm-chart - using
          other images might not work.
        properties:
          name:
            type: string
            description: |
              Name of the image, without the tag.

              Examples:
                - yuvipanda/wikimedia-hub
                - gcr.io/my-project/my-hub
          tag:
            type: string
            description: |
              The tag of the image to pull.

              This is the value after the `:` in your full image name.
      db:
        type: object
        properties:
          type:
            type: string
            enum:
              - sqlite-pvc
              - sqlite-memory
              - mysql
              - postgres
            description: |
              Type of database backend to use for the hub database.

              The Hub requires a persistent database to function, and this lets you specify
              where it should be stored.

              The various options are:

              1. **sqlite-pvc**

                 Use an `sqlite` database kept on a persistent volume attached to the hub.

                 By default, this disk is dynamically created using the default
                 [dynamic provisioner]. You can customize how this disk is created / attached
                 by setting various properties under `hub.db.pvc`.

                 This is the default setting, and should work well for most cloud provider
                 deployments.

              2. **sqlite-memory**

                 Use an in-memory `sqlite` database. This should only be used for testing,
                 since the database is erased whenever the hub pod restarts - causing the hub
                 to lose all memory of users who had logged in before.

                 When using this for testing, make sure you delete all other objects that the
                 hub has created (such as user pods, user PVCs, etc) every time the hub restarts.
                 Otherwise you might run into errors about duplicate resources.

              3. **mysql**

                 Use an externaly hosted mysql database.

                 You have to specify an sqlalchemy connection string for the mysql database you
                 want to connect to in `hub.db.url` if using this option.

                 The general format of the connection string is:
                 ```
                 mysql+pymysql://<db-username>:<db-password>@<db-hostname>:<db-port>/<db-name>
                 ```

                 The user specified in the connection string must have the rights to create
                 tables in the database specified.

                 Note that if you use this, you *must* also set `hub.cookieSecret`.

              4. **postgres**

                 Use an externaly hosted postgres database.

                 You have to specify an sqlalchemy connection string for the postgres database you
                 want to connect to in `hub.db.url` if using this option.

                 The general format of the connection string is:
                 ```
                 postgres+psycopg2://<db-username>:<db-password>@<db-hostname>:<db-port>/<db-name>
                 ```

                 The user specified in the connection string must have the rights to create
                 tables in the database specified.

                 Note that if you use this, you *must* also set `hub.cookieSecret`.
          pvc:
            type: object
            descripton: |
              Customize the Persistent Volume Claim used when `hub.db.type` is `sqlite-pvc`.
            properties:
              annotations:
                type: object
                description: |
                  Annotations to apply to the PVC containing the sqlite database.

                  TODO: Link to pvc annotations
              selector:
                type: object
                description: |
                  Selectors to set for the PVC containing the sqlite database.

                  Useful when you are using a static PVC.

                  TODO: Link to pvc selector docs.
              storage:
                type: string
                description: |
                  Size of disk to request for the database disk.
          url:
            type:
              - string
              - "null"
            description: |
              Connection string when `hub.db.type` is mysql or postgres.

              See documentation for `hub.db.type` for more details on the format of this property.
      labels:
        type: object
        description: |
          Extra labels to add to the hub pod.

          See [the kubernetes documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
          to learn more about labels.
      extraEnv:
        type: list
        description: |
          Extra environment variables that should be set for the hub pod.

          A list of [EnvVar](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#envvar-v1-core)
          objects.

          These are usually used in two circumstances:
            - Passing parameters to some custom code specified with `extraConfig`
            - Passing parameters to an authenticator or spawner that can be directly customized
              by environment variables (rarer)
      extraConfig:
        type: string
        description: |
          Arbitrary extra python based configuration that should be in `jupyterhub_config.py`.

          This is the *escape hatch* - if you want to configure JupyterHub to do something specific
          that is not present here as an option, you can just write the raw Python to do it here.

          Non-exhaustive examples of things you can do here:
            - Subclass authenticator / spawner to do a custom thing
            - Dynamically launch different images for different sets of images
            - Inject an auth token from GitHub authenticator into user pod
            - Anything else you can think of!

          Since this is usually a multi-line string, you want to format it using YAML's
          [| operator](http://www.yaml.org/spec/1.2/spec.html#id2795688).

          For example:
            ```
            hub:
              extraConfig: |
                c.JupyterHub.something = 'something'
                c.Spawner.somethingelse = 'something else'
            ```

          No validation of this python is performed! If you make a mistake here, it will probably
          manifest as either the hub pod going into `Error` or `CrashLoopBackoff` states, or in
          some special cases, the hub running but... just doing very random things. Be careful!
      uid:
        type: integer
        minimum: 0
        description:
          The UID the hub process should be running as.

          Use this only if you are building your own image & know that a user with this uid
          exists inside the hub container! Advanced feature, handle with care!

          Defaults to 1000, which is the uid of the `jovyan` user that is present in the
          default hub image.
      fsGid:
        type: integer
        minimum: 0
        description:
          The gid the hub process should be using when touching any volumes mounted.

          Use this only if you are building your own image & know that a group with this gid
          exists inside the hub container! Advanced feature, handle with care!

          Defaults to 1000, which is the gid of the `jovyan` user that is present in the
          default hub image.
  proxy:
    type: object
    properties:
      secretToken:
        type: string
        description: |
          A 64-byte cryptographically secure randomly generated string used to secure communications
          between the hub and the configurable-http-proxy.

          This must be generated with `openssl rand -hex 32`.

          Changing this value will cause the proxy and hub pods to restart. It is good security
          practice to rotate these values over time. If this secret leaks, *immediately* change
          it to something else, or user data can be compromised
    required:
      - secretToken


  auth:
    type: object
    properties:
      state:
        type: object
        properties:
          enabled:
            type: boolean
            description: |
              Enable persisting auth_state (if available).
              See: http://jupyterhub.readthedocs.io/en/latest/api/auth.html
          cryptoKey:
            type:
              - string
              - "null"
            description: |
              auth_state will be encrypted and stored in the Hub’s database. This can include things like authentication tokens, etc. to be passed to Spawners as environment variables.
              Encrypting auth_state requires the cryptography package.
              It must contain one (or more, separated by ;) 32B encryption keys. These can be either base64 or hex-encoded.
              The JUPYTERHUB_CRYPTO_KEY envirionment variable will be used to set this key.

              This can be generated with `openssl rand -hex 32`.

              If encryption is unavailable, auth_state cannot be persisted.


  singleuser:
    type: object
    description: |
      Options for customizing the environment that is provided to the users after they log in.
    properties:
      cpu:
        type: object
        description: |
          Set CPU limits & guarantees that are enforced for each user.
          See: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        properties:
          limit:
            type:
            - string
            - "null"
          guarantee:
            type:
            - string
            - "null"
      memory:
        type: object
        description: |
          Set Memory limits & guarantees that are enforced for each user.
          See: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        properties:
          limit:
            type:
            - string
            - "null"
          guarantee:
            type:
            - string
            - "null"
      image:
        type: object
        description: |
          Set custom image name / tag used for spawned users.

          This image is used to launch the pod for each user.
        properties:
          name:
            type: string
            description: |
              Name of the image, without the tag.

              Examples:
                - yuvipanda/wikimedia-hub-user
                - gcr.io/my-project/my-user-image
          tag:
            type: string
            description: |
              The tag of the image to use.

              This is the value after the `:` in your full image name.
  

  scheduling:
    type: object
    description: |
      Objects for customizing the scheduling of various pods on the nodes and
      related labels.
    properties:
      userPlaceholder:
        type: object
        description: |
          User placeholders simulate users but will thanks to PodPriority be
          evicted by the cluster autoscaler if a real user shows up. Thanks to
          placeholders, you are able to create a headroom for the real users and
          reduce the risk of a user having to wait for a node to be added. It is
          highly recommended to use the continuous pre-puller as well along with
          placeholders, so the images are also available when real users arrive.
        properties:
          enabled:
            type: bool
          replicas:
            type: int
            description: |
              How many placeholder pods would you like to have?
          resources:
            type: object
            description: |
              Unless specified here, the placeholder pods will request the same
              resources specified for the real singleuser pods.
      userDummy:
        type: object
        description: |
          User dummies can help you ensure your cluster autoscaler,
          jupyterhub-scheduler and pod priority is setup to your liking. User
          dummies behave like placeholders but they have their pod priority
          setup like real users and can evict placeholders.

          To test your setup efficiently, you can adjust the amount of user
          dummies with the following command.

          ```
          # First let there be for example 3 user dummies
          kubectl patch deployment user-dummy --patch '{"spec": {"replicas": 3}}'

          # Then perhaps let there be 10 user dummies
          kubectl patch deployment user-dummy --patch '{"spec": {"replicas": 10}}'
          ```
        properties:
          enabled:
            type: bool
          replicas:
            type: int
            description: |
              How many user-dummy pods would you like to have? Note that it
              makes more sense to have this set at 0 but then adjust it with a
              kubectl patch command during testing.
          resources:
            type: object
            description: |
              Unless specified here, the user-dummy pods will request the same
              resources specified for the real singleuser pods.
      podPriority:
        type: object
        description: |
          Generally available since kubernetes 1.11, Pod Priority is used to
          allow real users evict placeholder pods.
        properties:
          enabled:
            type: bool
            description: |
              Generally available since kubernetes 1.11, Pod Priority is used to
              allow real users evict placeholder pods.
      podAffinity:
        type: object
        description: |
          When a pod is to be scheduled, the scheduled can be made to prefer of
          require having other pods within the same domain (commonly the same
          node).
        properties:
          userToRealUserAffinity:
            type: bool
            description: |
              Should user pods (placeholder pods and real users) prefer to
              schedule next to real users? This is recommended for use with
              cluster autoscalers on clusters with less than hundred nodes. This
              is not recommended if you use a fixed amount of nodes as the users
              may be able to utilize the nodes hardware more efficiently if they
              spread out.
      nodeAffinity:
        type: object
        description: |
          Where should pods be scheduled? Perhaps on nodes with a certain label
          is prefered or even required?
        properties:
          matchNodePurposeWithPodKind:
            type: object
            description: |
              The "hub.jupyter.org/node-purpose" label and its values ("core" |
              "user") on nodes can influence where pods are scheduled. This
              chart creates two kinds of pods, the user pods and the core pods.
              Should user pods and core pods respectively ignore, prefer or
              require a matching node purpose label on the node they are to be
              scheduled on?
            properties:
              corePods:
                type: string
                enum:
                  - ignore
                  - prefer
                  - require
                description: |
                  Decide if core pods "ignore", "prefer" or "require" to
                  schedule on nodes with the label
                  "hub.jupyter.org/node-purpose=core".
              userPods:
                type: string
                enum:
                  - ignore
                  - prefer
                  - require
                description: |
                  Decide if user pods "ignore", "prefer" or "require" to
                  schedule on nodes with the label
                  "hub.jupyter.org/node-purpose=user".
      jupyterhubScheduler:
        type: object
        description: |
          The jupyterhub scheduler is making sure that user pods are scheduled
          tight on nodes, this is useful for autoscaling of user node pools.
          properties:
            enabled:
              type: boolean
              description: |
                Enables the jupyterhub scheduler.
            replicas:
              type: integer
              description: |
                You can have multiple schedulers to share the workload or
                improve availability on node failure.
            image:
              type: object
              description: |
                The image containing the kube-scheduler binary.
                - https://console.cloud.google.com/gcr/images/google-containers/GLOBAL/kube-scheduler-amd64
              properties:
                name:
                  type: string
                  description: |
                    The image name containing the kube-scheduler binary.
                    - https://console.cloud.google.com/gcr/images/google-containers/GLOBAL/kube-scheduler-amd64
                tag:
                  type:
                    - string
                    - "null"
                  description: |
                    The tag will default to the clusters kubernetes version.
                    - https://console.cloud.google.com/gcr/images/google-containers/GLOBAL/kube-scheduler-amd64
