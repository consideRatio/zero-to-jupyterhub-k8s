#!/bin/bash
# NOTE: The script should be executed from the repo directory

# SCRIPT SUMMARY
# --------------
# 1. Start and await minikube
# 2. Initialize Helm

# Set shell options
# -e : Exit immediately if a command exits with a non-zero status.
# -u : Treat unset variables as an error when substituting.
# -x : Print commands and their arguments as they are executed.
set -eux

# Setup Kubernetes
# ----------------
if (timeout 3 bash -c 'kubectl get pod -n kube-system --selector app=helm,name=tiller | grep 1/1'); then
  exit 0
fi

echo "starting minikube"
# IF CICD ENVIRONMENT
if set +u && [[ ! -z "${CICD}" ]] && set -u; then
  minikube config set vm-driver none
  export CHANGE_MINIKUBE_NONE_USER=true
  SUDO='sudo -E'
else
  minikube config set vm-driver virtualbox
  SUDO=''
fi;
minikube config set kubernetes-version v${KUBE_VERSION}
minikube config set WantReportErrorPrompt false
minikube config set WantKubectlDownloadMsg false
minikube config set ShowBootstrapperDeprecationNotification false

if [[ ${KUBE_VERSION} == 1.8* ]] || [[ ${KUBE_VERSION} == 1.9* ]] || [[ ${KUBE_VERSION} == 1.10.0* ]]; then
  # WARNING: localkube not supported beyond Kubernetes 1.10.0
    $(echo $SUDO) $(which minikube) start --bootstrapper=localkube --extra-config=apiserver.Authorization.Mode=RBAC
else
  # WARNING: kubeadm requires systemd. systemd isn't available for Ubuntu 14.04
  # (trusty) VMs as used by Travis and CircleCI. It is available on Ubuntu 16.04
  # (xenial) or 18.04 (bionic) VMs though.
    $(echo $SUDO) $(which minikube) start
fi

# IF LOCAL ENVIRONMENT
if set +u && [[ -z "${CICD}" ]] && set -u; then
  echo "setup minikbe context"
  minikube update-context

  echo "setup default namespace"
  kubectl config set-context $(kubectl config current-context) --namespace jh
fi;

echo "waiting for kubernetes"
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
  sleep 1
done
kubectl get nodes

if ! (kubectl get pod -n kube-system --selector app=helm,name=tiller | grep 1/1); then
  echo "initialize helm"
  # Allow resources to pre-exist
  set +e
  kubectl create serviceaccount tiller --namespace kube-system
  kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
  helm init --service-account tiller
  set -e

  echo "waiting for tiller"
  kubectl --namespace=kube-system rollout status --watch=true deployment/tiller-deploy
fi
